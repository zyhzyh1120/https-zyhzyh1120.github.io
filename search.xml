<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>enum应用</title>
    <url>/2021/10/15/enum/</url>
    <content><![CDATA[<h2 id="方式一（适用于简易过滤器中）"><a href="#方式一（适用于简易过滤器中）" class="headerlink" title="方式一（适用于简易过滤器中）"></a>方式一（适用于简易过滤器中）</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// enum.js**文件</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取枚举值：STATUSMAP.TTT</span></span><br><span class="line"><span class="comment"> * 获取枚举描述：STATUSMAP.getDesc(&#x27;SH&#x27;)</span></span><br><span class="line"><span class="comment"> * 通过枚举值获取描述：STATUSMAP.getDescFromValue(&#x27;TG&#x27;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">STATUSMAP</span> = <span class="title function_">createEnum</span>(&#123;</span><br><span class="line">  <span class="attr">SH</span>: [<span class="string">&quot;SH&quot;</span>, <span class="string">&quot;审核中&quot;</span>],</span><br><span class="line">  <span class="attr">TG</span>: [<span class="string">&quot;TG&quot;</span>, <span class="string">&quot;审核通过&quot;</span>],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createEnum</span>(<span class="params">definition</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> valueMap = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> descMap = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(definition)) &#123;</span><br><span class="line">    <span class="keyword">const</span> [value, desc] = definition[key];</span><br><span class="line">    valueMap[key] = value;</span><br><span class="line">    descMap[value] = desc;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...valueMap,</span><br><span class="line">    <span class="title function_">getDesc</span>(<span class="params">key</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (definition[key] &amp;&amp; definition[key][<span class="number">1</span>]) || <span class="string">&quot;无&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">getDescFromValue</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> descMap[value] || <span class="string">&quot;无&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="variable constant_">STATUSMAP</span>;</span><br></pre></td></tr></table></figure></div>

<p><strong>view</strong>文件</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 过滤器中使用 则在filters过滤器中直接使用函数返回值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>枚举测试<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前状态：&#123;&#123;STATUS.getDescFromValue(&#x27;SH&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>也可用通过枚举名称获取描述：&#123;&#123;STATUS.getDesc(&#x27;HHH&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="方拾二（过滤器，循环列表）"><a href="#方拾二（过滤器，循环列表）" class="headerlink" title="方拾二（过滤器，循环列表）"></a>方拾二（过滤器，循环列表）</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// order.js文件</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义枚举值 [&#123;value: &#x27;&#x27;, label: &#x27;&#x27;&#125;]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">order</span>: [</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&quot;TJ&quot;</span>, <span class="attr">label</span>: <span class="string">&quot;已提交&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&quot;CZ&quot;</span>, <span class="attr">label</span>: <span class="string">&quot;处理中&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&quot;CL&quot;</span>, <span class="attr">label</span>: <span class="string">&quot;已处理&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">orderDetail</span>: [</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&quot;DF&quot;</span>, <span class="attr">label</span>: <span class="string">&quot;待发货&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&quot;FH&quot;</span>, <span class="attr">label</span>: <span class="string">&quot;已发货&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&quot;QS&quot;</span>, <span class="attr">label</span>: <span class="string">&quot;已签收&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// constants.js文件</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义枚举工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> order <span class="keyword">from</span> <span class="string">&quot;./order/index.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> constants = &#123;</span><br><span class="line">  ...order,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> valueMap = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> nameMap = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(constants).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  valueMap[key] = [];</span><br><span class="line">  nameMap[key] = &#123;&#125;;</span><br><span class="line">  constants[key].<span class="title function_">forEach</span>(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    valueMap[key].<span class="title function_">push</span>(event);</span><br><span class="line">    nameMap[key][event.<span class="property">value</span>] = event.<span class="property">label</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; valueMap, nameMap &#125;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* view文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>枚举值用于展示<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">el-button</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in valueMap.order&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item.label&#125;&#125;<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span></span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>枚举值过滤器<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">el-button</span>&gt;</span>&#123;&#123;enumValue | filterStatus(&#x27;orderDetail&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; valueMap, nameMap &#125; <span class="keyword">from</span> <span class="string">&#x27;@/constants&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">STATUS</span>: <span class="variable constant_">STATUS</span>,</span><br><span class="line">      valueMap,</span><br><span class="line">      <span class="attr">enumValue</span>: <span class="string">&#x27;FH&#x27;</span>, <span class="comment">// 发货</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filters</span>:&#123;</span><br><span class="line">    <span class="attr">filterStatus</span>: <span class="keyword">function</span>(<span class="params">val, key</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(!val &amp;&amp; val !== <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&#x27;无&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> nameMap[key][val];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Enum</category>
      </categories>
      <tags>
        <tag>enum</tag>
      </tags>
  </entry>
  <entry>
    <title>flex布局</title>
    <url>/2020/05/19/flex/</url>
    <content><![CDATA[<h1 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h1><p>父元素设置为 Flex 后 , 子元素根据内容撑开, 如果宽度不够, 没有内容的会被挤压</p>
<h4 id="应用场景-横向滚动"><a href="#应用场景-横向滚动" class="headerlink" title="应用场景: 横向滚动"></a>应用场景: 横向滚动</h4><p><a href="">情况分析:</a></p>
<p>子元素有宽度 , 但是子元素数量多, 并且子元素内的元素宽度小于自己宽度, 滚动效果出现, 子元素中没有内容的剩余空间被挤压, 没有达到预期效果</p>
<p><a href="">解决方案:</a> 在子元素中继续添加元素, 设置宽度跟上一级相同, 撑开子元素内的内容 , 解决!!!</p>
<h3 id="1-flex-direction-属性-主轴"><a href="#1-flex-direction-属性-主轴" class="headerlink" title="1 flex-direction 属性(主轴)"></a>1 flex-direction 属性(主轴)</h3><ul>
<li>row（默认值）：主轴为水平方向，起点在左端。<br>row-reverse：主轴为水平方向，起点在右端。<br>column：主轴为垂直方向，起点在上沿。<br>column-reverse：主轴为垂直方向，起点在下沿。</li>
</ul>
<h3 id="2-flex-wrap-属性-子"><a href="#2-flex-wrap-属性-子" class="headerlink" title="2 flex-wrap 属性(子)"></a>2 flex-wrap 属性(子)</h3><p>（1）nowrap（默认）：不换行。</p>
<p>（2）wrap：换行，第一行在上方。</p>
<p>（3）wrap-reverse：换行，第一行在下方。</p>
<h3 id="3-flex-flow"><a href="#3-flex-flow" class="headerlink" title="3 flex-flow"></a>3 flex-flow</h3><p>flex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式 。</p>
<p>默认值为 row nowrap。</p>
<h3 id="4-justify-content-属性-主轴"><a href="#4-justify-content-属性-主轴" class="headerlink" title="4 justify-content 属性(主轴)"></a>4 justify-content 属性(主轴)</h3><p>justify-content 属性定义了项目在主轴上的对齐方式。</p>
<ul>
<li><p>flex-start（默认值）：左对齐</p>
</li>
<li><p>flex-end：右对齐</p>
</li>
<li><p>center： 居中</p>
</li>
<li><p>space-between：两端对齐，项目之间的间隔都相等。</p>
</li>
<li><p>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p>
</li>
</ul>
<h3 id="5-align-items-属性"><a href="#5-align-items-属性" class="headerlink" title="5 align-items 属性"></a>5 align-items 属性</h3><p>align-items 属性定义项目在交叉轴上如何对齐。</p>
<ul>
<li>flex-start：交叉轴的起点对齐。</li>
<li>flex-end：交叉轴的终点对齐。</li>
<li>center：交叉轴的中点对齐。</li>
<li>baseline: 项目的第一行文字的基线对齐。</li>
<li>stretch（默认值）：如果项目未设置高度或设为 auto，将占满整个容器的高度.</li>
</ul>
<h3 id="6-align-content-属性"><a href="#6-align-content-属性" class="headerlink" title="6 align-content 属性"></a>6 align-content 属性</h3><p>align-content 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</p>
<ul>
<li>flex-start：与交叉轴的起点对齐。</li>
<li>flex-end：与交叉轴的终点对齐。</li>
<li>center：与交叉轴的中点对齐。</li>
<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li>stretch（默认值）：轴线占满整个交叉轴。</li>
</ul>
<h3 id="7-flex-grow-属性"><a href="#7-flex-grow-属性" class="headerlink" title="7 flex-grow 属性"></a>7 flex-grow 属性</h3><p>如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间（如果有的话）。</p>
<p>如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="F:\资料文件夹\uni-app\typora\images\比例分布.png"
                      alt="比例分布"
                ></p>
<h3 id="父项"><a href="#父项" class="headerlink" title="父项"></a>父项</h3><p>1- 设置主轴子项的对齐方式: <strong>justify-content</strong><br>flex-start 左对齐<br>flex-end 右对齐<br>center 中间对齐<br>space-between 先两边再平分空间<br>space-around 平分空间</p>
<p>2- 设置侧轴子项的对齐方式: <strong>align-self</strong><br>flex-start 上对齐<br>flex-end 下对齐<br>center 居中</p>
<p>3- 设置子项占父项的剩余宽度的份数<br>flex : 1<br>flex: 2</p>
<p>4- 设置子项的排列顺序<br> <strong>order</strong><br>默认值 为 0<br>值越小越靠前</p>
<p>5- 换行:<br>flex-wrap: wrap<br>默认不换行: nowrap</p>
<h3 id="子项"><a href="#子项" class="headerlink" title="子项"></a>子项</h3><p>1- 设置侧轴的对齐方式( 设置单行 ) : align-items<br>flex-start 上对齐<br>flex-end 下对齐<br>center 中间</p>
<p>2- 设置侧轴的对齐方式( 设置多行 ) : align-content<br>flex-start 左对齐<br>flex-end 右对齐<br>center 中间<br>space-between 先两边 ,再平分空间</p>
]]></content>
      <categories>
        <category>Flex</category>
      </categories>
      <tags>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>前端工程化</title>
    <url>/2020/05/19/front-engineering/</url>
    <content><![CDATA[<h2 id="基本规范"><a href="#基本规范" class="headerlink" title="基本规范"></a>基本规范</h2><p><strong>一、html</strong></p>
<p>1.1 使用 <!Doctype html> 文档类型声明，h5 的最新声明方式</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>1.2 设置网页的编码以及文档类型</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>1.3 设置网页的渲染模式，按照最新的模式渲染</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>2</strong>、CSS 和 JavaScript 引入 * *</p>
<p>2.1 引入 CSS 时必须指明 rel&#x3D;”stylesheet”</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;page.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>2.2 JavaScript 应当放在页面末尾，或采用异步加载。</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- a lot of elements --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;’init-behavior.js’&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>二、CSS</strong></p>
<p><strong>1、书写</strong></p>
<p>1.1 禁止使用层级过深的选择器，允许最多三级</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.box</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>1.2 属性书写顺序遵循以下规则</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 位置属性 */</span></span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="comment">/* 盒模型 */</span></span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 文本属性 */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  / * 背景属性  */</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  / * 其他  */</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>2、命名</strong><br>选择器命名必须使用小写，单词间使用-分隔，命名语义化</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 应用列表 */</span></span><br><span class="line"><span class="selector-class">.application-manage-list</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>三、JS</strong></p>
<p><strong>1</strong>、变量</p>
<p>命名方式：<a href="">小驼峰</a></p>
<p>命名规范：<a href="">前缀名词</a></p>
<p>命名建议：语义化</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 友好</span></span><br><span class="line"><span class="keyword">let</span> maxCount = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> tableTitle = <span class="string">&quot;LoginTable&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不友好</span></span><br><span class="line"><span class="keyword">let</span> setCount = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> getTitle = <span class="string">&quot;LoginTable&quot;</span>;</span><br></pre></td></tr></table></figure></div>

<p><strong>2</strong>、常量</p>
<p>命名方式：<a href="">全部大写</a></p>
<p>命名规范：<a href="">使用大写字母和下划线来组合命名，下划线用以分割单词</a></p>
<p>命名建议：语义化</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">MAX_COUNT</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">URL</span> = <span class="string">&quot;http://www.foreverz.com&quot;</span>;</span><br></pre></td></tr></table></figure></div>

<p><strong>3</strong>、函数</p>
<p>命名方式：<a href="">小驼峰式命名法</a>。</p>
<p>命名规范：<a href="">前缀应当为动词</a>。</p>
<p>命名建议：语义化</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否可阅读</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">canRead</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取名称</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>4、构造函数</strong></p>
<p>命名方式：大驼峰式命名法，首字母大写</p>
<p>命名规范：前缀为名称。</p>
<p>命名建议：语义化</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例子:</span></span><br><span class="line"><span class="keyword">const</span> getPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">  <span class="comment">// 或 reject()</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p><strong>5</strong>、函数&#x2F;方法 注释必须包含函数说明，有参数和返回值时必须使用注释标注，参考下面样例。参考 jsdoc</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">正例：</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 函数描述 *</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; p1 参数1的说明</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; p2 参数2的说明，比较长</span></span><br><span class="line"><span class="comment">*     那就换行了.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">number=</span>&#125; p3 参数3的说明（可选）</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &#123;<span class="type">Object</span>&#125; 返回值描述</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">p1, p2, p3</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> p3 = p3 || <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">p1</span>: p1,</span><br><span class="line">        <span class="attr">p2</span>: p2,</span><br><span class="line">        <span class="attr">p3</span>: p3</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><h3 id="全局方法、事件，组件，js"><a href="#全局方法、事件，组件，js" class="headerlink" title="全局方法、事件，组件，js"></a>全局方法、事件，组件，js</h3><p>1、禁止业务逻辑的 mixins 进行全局注册<br>2、使用 addEventListener 注册事件，注意需要销毁，防止内存泄漏等。<br>3、若不需要双向绑定数据，尽量把变量定义为 data 函数的内部变量，不用添加在 return 对象里。<br>4、全局组件的 name 统一前缀加’p’,参考 src&#x2F;components&#x2F;remote-select&#x2F;index.vue 组件的 name 命名方式</p>
<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>1、vue 文件尽量使用 scoped 限制作用范围</p>
<h3 id="权限方面"><a href="#权限方面" class="headerlink" title="权限方面"></a>权限方面</h3><p>按钮权限命名要求： 模块名:请求 api 路径 例如 sku:&#x2F;wawa-open-common-server&#x2F;upload&#x2F;image<br>菜单创建要求：每创建一个菜单需要创建一个对应的查看按钮权限</p>
<h3 id="文件目录结构"><a href="#文件目录结构" class="headerlink" title="文件目录结构"></a>文件目录结构</h3><p>项目文件结构一般都大同小异，可以参考 scm 项目的文件说明</p>
<ul>
<li>api: 存放整个项目的请求 api</li>
<li>assets: 存放项目静态资源</li>
<li>common: 公共 js 功能，一般挂载在 vue.prototype 上</li>
<li>components: 公共组件，包括框架基础界面布局，基于业务的通用组件</li>
<li>config: 配置文件，配置全局请求的域名,项目公共的数据，配置全局表格的方法</li>
<li>constants: 存放整个项目的不同模块所需的枚举值，供.&#x2F;filter 过滤器使用</li>
<li>filter: 存放过滤器函数</li>
<li>mixin: 存放混合函数，一般不全局混合注册，按需注册</li>
<li>router: 全局路由，定义项目所有的路由，在登录的时候根据接口返回，按需注册路由，进行菜单权限控制</li>
<li>store: 存放 vuex 一些函数，目前保存菜单路由，全局表格 vxe-table 的高度计算函数</li>
<li>until: 一些工具函数,按需导入使用</li>
<li>views: 业务页面</li>
<li>.gitlab-cli.yml: gitlab 自动部署配置的文件，一般只需要更改 scripts 与 tags 里的内容</li>
</ul>
]]></content>
      <categories>
        <category>工程化</category>
      </categories>
      <tags>
        <tag>工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2022/11/21/git/</url>
    <content><![CDATA[<h2 id="Git-常用命令速查"><a href="#Git-常用命令速查" class="headerlink" title="Git 常用命令速查"></a>Git 常用命令速查</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -r  // 查看远程所有分支</span><br><span class="line"></span><br><span class="line">git revert [commit_id]   // 撤销某次操作，此次操作之前和之后的 commit 和 <span class="built_in">history</span> 都会保留</span><br><span class="line">git revert HEAD          //撤销倒数第一次提交</span><br><span class="line">git revert HEAD^         //撤销倒数第二次提交</span><br><span class="line">git revert HEAD~2        //撤销倒数第三次提交</span><br><span class="line"></span><br><span class="line">// 创建本地分支并关联</span><br><span class="line">git checkout -b 本地分支 origin/远程分支</span><br><span class="line">git branch --set-upstream-to origin/远程分支名 本地分支名      //已有本地分支创建关联</span><br><span class="line">git pull // 拉取</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 验证github秘钥</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></div>

<h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git revert ：撤销某次操作</span><br><span class="line">git reset &lt;<span class="built_in">hash</span>&gt;：是撤销某次提交，但是此次之后的修改都会被退回到暂存区。除了默认的 mixed 模式，还有 soft 和 hard 模式。</span><br><span class="line">git reset --soft ：回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级。如果还要提交，直接 commit 即可；</span><br><span class="line">git reset --hard ： 彻底回退到某个版本，本地的源码也会变为上一个版本的内容，撤销的 commit 中所包含的更改被冲掉；</span><br><span class="line"></span><br><span class="line">1. 当代码已经 commit 但没有 push 时，可使用如下命令操作：</span><br><span class="line">   git revert HEAD //撤销倒数第一次提交</span><br><span class="line">   git revert HEAD^ //撤销倒数第二次提交</span><br><span class="line">   git revert HEAD~2 //撤销倒数第三次提交</span><br><span class="line"></span><br><span class="line">   git revert [commit_id] // 比如：fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff）撤销指定的版本，撤销也会作为一次提交进</span><br><span class="line"></span><br><span class="line">2. 当代码已经 commit 并 push 时，可使用如下命令：</span><br><span class="line">   git revert HEAD~1 //代码回退到前一个版本</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: 当回退有冲突时，需手动合并冲突并进行修改，再 commit 和 push。</span></span><br><span class="line"><span class="comment"># 这相当于增加了一次新的提交并且版本库中有记录。</span></span><br><span class="line">  git reset --soft 和 git reset --hard</span><br><span class="line">  git reset –-soft</span><br></pre></td></tr></table></figure></div>

<ul>
<li>回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级；如果还要提交，直接 commit 即可；<ul>
<li>如果是为了版本回退，本地低于线上版本则需要加 –force</li>
<li>git push origin 分支 –force &#x2F;&#x2F; ok，大功告成</li>
</ul>
</li>
</ul>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git reset -–hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容，撤销的 commit 中所包含的更改被冲掉，接着推送就可以了；</span><br><span class="line">// 参数 --soft 指的是：保留当前工作区，以便重新 commit。</span><br><span class="line">// 参数 --hard 指的是：不保留工作区，丢弃代码</span><br><span class="line">// 然后 git reset HEAD 就回退成功了</span><br><span class="line"></span><br><span class="line">// 如果是为了版本回退，本地低于线上版本则需要加 --force</span><br><span class="line">git push origin 分支 --force // ok，大功告成</span><br><span class="line"></span><br><span class="line">// 删除指定的 commits，需要执行变基操作，在多人协作的项目中，不推荐对已推送到远程仓库的内容进行变基操作</span><br><span class="line">交互式的变基简介</span><br><span class="line">在 rebase 命令中加入 -i 或 --interactive 参数，在交互模式下完成</span><br><span class="line">交互模式会将指定的 commit 后的所有提交列出，行格式：(action) (partial-sha) (short commit message)</span><br><span class="line">你可以上下移动这些行从而对提交进行重排序。当你退出编辑器时，git 会按照你指定的顺序去应用提交，并且做出相应的操作（action）。</span><br><span class="line">操作(action)说明</span><br><span class="line">edit：使用 commit，但是暂停以便进行修正</span><br><span class="line">squash：使用 commit，但是把它与前一次 commit 合并</span><br><span class="line">pick：使用 commit</span><br><span class="line">drop：移除 commit</span><br><span class="line">git rebase -i origin/master 会将最后一次从 origin 仓库拉取或者向 origin 推送之后的所有提交列出。</span><br><span class="line"></span><br><span class="line">1. 首先使用 git <span class="built_in">log</span> 命令找到需要删除的 commit 版本的前一次 commit 的 commit_id</span><br><span class="line">2. 进入交互模式，进入后不会列出当前版本</span><br><span class="line">3. git rebase -i [commit_id]</span><br><span class="line">4. 进入编辑模式，将第一行（即你需要删除的 commit）前的操作符修改为 drop</span><br><span class="line">5. 修改完成后，退出编辑模式然后保存 :wq</span><br><span class="line"></span><br><span class="line"><span class="comment">## git 提交日志规范</span></span><br><span class="line">- feat：新功能（feature）</span><br><span class="line">- fix：修补 bug</span><br><span class="line">- docs：文档（documentation）</span><br><span class="line">- style： 不影响代码运行的变动（css，空格，格式，缺少分号等）</span><br><span class="line">- refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）</span><br><span class="line">- <span class="built_in">test</span>：增加测试</span><br><span class="line">- chore：构建过程或辅助工具的变动，对构建过程或辅助工具和库（如文档生成）的更改</span><br><span class="line">- build： 源码构建配置文件的变动</span><br><span class="line">- <span class="built_in">test</span>： 添加缺失或更正现有测试 ，单元（集成）测试的源码提交</span><br><span class="line">- revert: 代码还原的变动</span><br><span class="line">- ci: 持续集成工具的变动</span><br><span class="line">- perf: 代码更改可提高性能，软件性能分析工具的变动</span><br><span class="line">- [^可单个或多个标识组合使用：]: 例：fix+style(_): 修改了去除定位偏移的 bug+背景样式修改</span><br><span class="line">scope</span><br><span class="line">用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同，逗号分隔。</span><br><span class="line">说明哪个模块受到影响，子模块斜杠分割，多个模块逗号分隔。</span><br><span class="line">例：feat(品牌大全/列表页，新机大全/详情页，某个模块名)：添加 xxx</span><br><span class="line">例：feat(.eslintrc.js,某个单文件文件名)：更新 xx 配置</span><br><span class="line">当更改影响多个范围时，您可以使用_。</span><br><span class="line">例：feat(\*): 更新远端 dev 仓库代码</span><br><span class="line">subject</span><br><span class="line">是 commit 目的的简短描述，不超过 50 个字符。</span><br><span class="line">开头请使用： 添加 xxx 移出(清空)xxx 升级(更新)xxx 覆盖 xxx 改变 xxx 切换 xxx 为 xxx 修复 xxx</span><br><span class="line">以动词开头，使用第一人称现在时，比如 change，而不是 changed 或 changes</span><br><span class="line">第一个字母小写</span><br><span class="line">结尾不加句号（.）</span><br></pre></td></tr></table></figure></div>

<h4 id="分支说明："><a href="#分支说明：" class="headerlink" title="分支说明："></a>分支说明：</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dev：开发分支，为未通过测试最新代码源</span><br><span class="line">pre: 预发布环境, 为部署生产最后调整</span><br><span class="line">master：生产环境，为部署线上正式环境代码源</span><br><span class="line">合并代码过程中，有冲突需先解决冲突部分代码。</span><br><span class="line">合并代码完成，检查两个文件与分支说明是否对应：</span><br></pre></td></tr></table></figure></div>

<h4 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h4><p>1.安装 node.js<br>2.npm install<br>3.npm run serve<br>手动构建(打包)流程<br>开发环境 npm run dev 测试环境 npm run test 开发环境 npm run prod 以上所有构建流程之前先配置好(.gitlab-ci.yml)打包环境</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello world</title>
    <url>/2020/05/10/hello-world/</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Demo</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>tabs演示</title>
    <url>/2022/11/20/jottings/</url>
    <content><![CDATA[<div class="tabs" id="tab-first-unique-name"><ul class="nav-tabs"><li class="tab active"><a class="#first-unique-name-1">First Tab</a></li><li class="tab"><a class="#first-unique-name-2">Second Tab</a></li><li class="tab"><a class="#first-unique-name-3">Third Tab</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="first-unique-name-2"><p><strong>This is Tab 2.</strong></p>
<p>This is Tab 2.</p></div><div class="tab-pane" id="first-unique-name-3"><p><strong>This is Tab 3.</strong></p>
<p>This is Tab 3.</p>
<p>This is Tab 3.</p></div></div></div>
]]></content>
      <categories>
        <category>Demo</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>npm相关</title>
    <url>/2022/11/21/npm/</url>
    <content><![CDATA[<h1 id="npm、nvm、nrm-配置相关"><a href="#npm、nvm、nrm-配置相关" class="headerlink" title="npm、nvm、nrm 配置相关"></a>npm、nvm、nrm 配置相关</h1><h2 id="CNPM"><a href="#CNPM" class="headerlink" title="CNPM"></a>CNPM</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></div>

<h2 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">nvm version   // 当前版本</span><br><span class="line">nvm li    // 列出本地node实例</span><br><span class="line">nvm list available    // 查看可下载node版本列表</span><br><span class="line"></span><br><span class="line">nvm install 4.2.2     // 安装</span><br><span class="line">nvm install 4.2       // nvm 会寻找 4.2.x 中最高的版本来安装</span><br><span class="line">nvm install latest    // 下载最新的稳定版node</span><br><span class="line">nvm uninstall 4.2.0   // 卸载node</span><br><span class="line"></span><br><span class="line">nvm current		// 查看当前版本</span><br><span class="line">nvm proxy			// 设置代理</span><br><span class="line"></span><br><span class="line">nvm use 4.2.2 		// 切换不同版本</span><br><span class="line">nvm use node		// 切换到本地最新</span><br><span class="line">nvm run 4.2.2 --version	// 运行指定的node</span><br><span class="line"></span><br><span class="line">nvm <span class="built_in">which</span> 4.2.2		// 确定指定版本路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意： 以下为必操作</span></span><br><span class="line">// 在setting 文件加， 避免node跟npm版本问题、node不带npm问题</span><br><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="npm-配置相关"><a href="#npm-配置相关" class="headerlink" title="npm 配置相关"></a>npm 配置相关</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 镜像源链接切换，查看镜像源使用状态</span></span><br><span class="line">npm get registry</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 设置镜像源</span></span><br><span class="line">npm get registry</span><br><span class="line">npm config <span class="built_in">set</span> registry &lt;url&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装私有包</span></span><br><span class="line"><span class="comment"># 普通的</span></span><br><span class="line"><span class="comment"># 先安装私有 npm 包：npm install &lt;name&gt; --registry=&lt;url&gt;</span></span><br><span class="line"><span class="comment"># 然后安装公共 npm 包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">  npm --registry https://registry.npm.taobao.org install &lt;name&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要先注册的(例子)</span></span><br><span class="line">npm <span class="built_in">set</span> registry http://47.101.202.23:4873/ // 设置</span><br><span class="line">npm adduser --registry http://47.101.202.23:4873/ // 注册</span><br><span class="line">npm login &lt;username&gt; //登录</span><br><span class="line">npm profile <span class="built_in">set</span> password --registry http://47.101.202.23:4873/</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装临时包</span></span><br><span class="line">npm install express --no-save // 安装临时包, 此次安装不会记录在 package.json</span><br></pre></td></tr></table></figure></div>

<h2 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">使用: nrm &lt;name&gt;</span><br><span class="line">下载: nrm：npm install -g nrm</span><br><span class="line">查看可切换的镜像源： nrm <span class="built_in">ls</span></span><br><span class="line">切换淘宝镜像源：nrm use taobao</span><br><span class="line">// (_表示正在使用的镜像源)</span><br><span class="line">_ npm -------- https://registry.npmjs.org/</span><br><span class="line">yarn ------- https://registry.yarnpkg.com/</span><br><span class="line">cnpm ------- http://r.cnpmjs.org/</span><br><span class="line">taobao ----- https://registry.npm.taobao.org/</span><br><span class="line">nj --------- https://registry.nodejitsu.com/</span><br><span class="line">npmMirror -- https://skimdb.npmjs.com/registry/</span><br><span class="line">edunpm ----- http://registry.enpmjs.org/</span><br></pre></td></tr></table></figure></div>

<h3 id="nrm-中主要的命令提示："><a href="#nrm-中主要的命令提示：" class="headerlink" title="nrm 中主要的命令提示："></a>nrm 中主要的命令提示：</h3><ul>
<li>nrm -V：查看当前 nvm 版本； (即：是 ‘nrm -Version’ 简写)；</li>
<li>nrm -h：显示所有命令； (即：是 ‘nrm -help’ 简写)；</li>
<li>nrm current：显示当前源名称;</li>
<li>nrm use <registry>：切 ‘npm’ 换源;</li>
<li>nrm add <registry> <url> [home]：添加一个源; (比如：公司自己的私有源)；</li>
<li>nrm set-auth <registry> <value> [always]：设置自定义源的授权信息；</li>
<li>nrm set-email <registry> <value>：给自定义源设置路径；</li>
<li>nrm set-hosted-repo <registry> <value>：设置发布到自定义源的 ‘npm’ 托管仓储</li>
<li>nrm del <registry>：删除自定义源;</li>
<li>nrm home <registry> [browser]：浏览器中打开源首页；</li>
<li>nrm publish [options] [<tarball>|<folder>]：发布包到自定义源，如果没有使用自定义源，则直接发布到 npm；</li>
<li>nrm test [registry]：测试源的访问速度； 不加 ‘registry’ 时，默认测试所有的源速度；</li>
</ul>
<h3 id="定制源"><a href="#定制源" class="headerlink" title="定制源"></a>定制源</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定制的源()</span></span><br><span class="line"><span class="comment"># 特别适用于添加企业内部的私有源，执行命令 nrm add &lt;registry&gt; &lt;url&gt;，其中 reigstry 为源名，url 为源的路径</span></span><br><span class="line">添加: nrm add &lt;registry&gt; http://192.168.0.127:8527/repository/npm-public/</span><br><span class="line">移除: nrm del &lt;registry&gt;</span><br><span class="line">测试延迟: nrm <span class="built_in">test</span></span><br></pre></td></tr></table></figure></div>

<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置代理</span></span><br><span class="line">git 设置 <span class="comment">#直接代理</span></span><br><span class="line">git config --global http.proxy http://127.0.0.1:80</span><br><span class="line">git config --global https.proxy https://127.0.0.1:80</span><br><span class="line"></span><br><span class="line"><span class="comment">#授权代理</span></span><br><span class="line">git config --global http.proxy http://username:password@127.0.0.1:80</span><br><span class="line">git config --global https.proxy https://username:password@127.0.0.1:80</span><br><span class="line"></span><br><span class="line"><span class="comment">#取消代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line"></span><br><span class="line">npm 设置 <span class="comment">#直接代理</span></span><br><span class="line">npm config <span class="built_in">set</span> proxy http://127.0.0.1:80</span><br><span class="line">npm config <span class="built_in">set</span> https-proxy https://127.0.0.1:80 <span class="comment">#授权代理</span></span><br><span class="line">npm config <span class="built_in">set</span> proxy http://username:password@127.0.0.1:80</span><br><span class="line">npm config <span class="built_in">set</span> https-proxy https://username:password@127.0.0.1:80</span><br></pre></td></tr></table></figure></div>

<h2 id="souceTree-使用问题"><a href="#souceTree-使用问题" class="headerlink" title="souceTree 使用问题"></a>souceTree 使用问题</h2><h3 id="拉取、提交提示权限问题"><a href="#拉取、提交提示权限问题" class="headerlink" title="拉取、提交提示权限问题"></a>拉取、提交提示权限问题</h3><div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">选项 &gt; 一般 &gt; SSH客户端配置 &gt; 把秘钥配置好</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>NPM</category>
      </categories>
      <tags>
        <tag>NPN</tag>
      </tags>
  </entry>
  <entry>
    <title>require.context</title>
    <url>/2022/11/21/require.context/</url>
    <content><![CDATA[<h2 id="初识-require-context"><a href="#初识-require-context" class="headerlink" title="初识 require.context"></a>初识 require.context</h2><p><strong>require.context 是 webpack 中，用来创建自己的（模块）上下文</strong></p>
<p>webpack 会在构建的时候解析代码中的 require.context()</p>
<p>require.context 函数接收三个参数：</p>
<blockquote>
<ol>
<li>要搜索的文件夹目录。</li>
<li>是否还应该搜索它的子目录。</li>
<li>以及一个匹配文件的正则表达式。</li>
</ol>
</blockquote>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="built_in">require</span>.<span class="title function_">context</span>(directory, (useSubdirectories = <span class="literal">false</span>), (regExp = <span class="regexp">/^\.\//</span>));</span><br></pre></td></tr></table></figure></div>


<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="comment">// （创建了）一个包含了 test 文件夹（不包含子目录）下面的、所有文件名以 `.test.js` 结尾的、能被 require 请求到的文件的上下文。</span></span><br><span class="line"><span class="keyword">const</span> testFiles = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&quot;./test&quot;</span>, <span class="literal">false</span>, <span class="regexp">/\.test\.js$/</span>);</span><br></pre></td></tr></table></figure></div>

<p>通过打印, 可以看出返回的是一个函数，意思就是说，require.context 模块导出（返回）一个（require）函数。<br>这个函数有三个属性：</p>
<blockquote>
<ol>
<li>resolve：是一个函数，它返回请求被解析后得到的模块 id。</li>
<li>keys：也是一个函数，它返回一个数组，由所有可能被上下文模块处理的请求组成。</li>
<li>id：是上下文模块里面所包含的模块 id. 它可能在你使用 module.hot.accept 的时候被用到<br>调用 testFiles.keys() 可以打印出.&#x2F;test 目录下所有 test 文件集合</li>
</ol>
</blockquote>
<hr>
<h3 id="vue-中的应用"><a href="#vue-中的应用" class="headerlink" title="vue 中的应用"></a>vue 中的应用</h3><p><em>router 路由自动化挂载, 全局组件自动化注册, vuex 状态自动化挂载</em></p>
<h4 id="router-例子-router-文件夹内模块化创建-亲测可用"><a href="#router-例子-router-文件夹内模块化创建-亲测可用" class="headerlink" title="router 例子(router 文件夹内模块化创建,亲测可用):"></a>router 例子(router 文件夹内模块化创建,亲测可用):</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> manageFiles = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;.&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(manageFiles.<span class="title function_">keys</span>()) <span class="comment">// [&#x27;./a.js&#x27;] 返回一个数组，包含全部文件名</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> configRouters = [];</span><br><span class="line">  manageFiles.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;./index.js&#x27;</span>) <span class="keyword">return</span>    <span class="comment">// 如果是当前文件，则跳过</span></span><br><span class="line">      configRouters = configRouters.<span class="title function_">concat</span>(<span class="title function_">manageFiles</span>(key).<span class="property">default</span>)  <span class="comment">// 读取出文件中的default模块</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> configRouters <span class="comment">// 抛出一个Vue-router期待的结构的数组</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>参考博客:<a class="link"   href="https://blog.csdn.net/viewyu12345/article/details/83012970" >https://blog.csdn.net/viewyu12345/article/details/83012970 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<h4 id="全局组件自动注册"><a href="#全局组件自动注册" class="headerlink" title="全局组件自动注册"></a>全局组件自动注册</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局组件各个组件按文件夹区分，文件夹名称与组件名无关联，但建议与组件名保持一致</span></span><br><span class="line"><span class="comment"> * 文件夹内至少保留一个文件名为 index 的组件入口，例如 Verify.vue</span></span><br><span class="line"><span class="comment"> * 普通组件必须设置 name 并保证其唯一，自动注册会将组件的 name 设为组件名，可参考 SvgIcon 组件写法</span></span><br><span class="line"><span class="comment"> * 如果组件是通过 js 进行调用，则确保组件入口文件为 verifition-api.js，可参考 ExampleNotice 组件</span></span><br><span class="line"><span class="comment"> * 不自动注册 则名字为其他的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> componentsContext = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;./&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/index.(vue|js)$/</span>)</span><br><span class="line">componentsContext.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">file_name</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取文件中的 default 模块</span></span><br><span class="line">  <span class="keyword">const</span> componentConfig = <span class="title function_">componentsContext</span>(file_name).<span class="property">default</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/.vue$/</span>.<span class="title function_">test</span>(file_name)) &#123;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(componentConfig.<span class="property">name</span>, componentConfig)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/.js/</span>.<span class="title function_">test</span>(file_name)) &#123;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">use</span>(componentConfig)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>require</category>
      </categories>
      <tags>
        <tag>require</tag>
      </tags>
  </entry>
  <entry>
    <title>vue</title>
    <url>/2023/02/15/vue/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>微信</title>
    <url>/2020/11/20/wechat/</url>
    <content><![CDATA[<div class="note-large notel-green"><div class="notel-title"><p>登录API</p>
</div><div class="notel-content"><p><a href="/views/wechat/wechat-login">公众号授权登录代码</a></p>
 </div></div>


<div class="note-large notel-green"><div class="notel-title"><p>媒体API</p>
</div><div class="notel-content"><p><a href="/views/wechat/wechat-media">微信jssdk录音API例子</a></p>
 </div></div>
]]></content>
      <categories>
        <category>wechat</category>
      </categories>
      <tags>
        <tag>WeChat</tag>
      </tags>
  </entry>
</search>
